package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"strconv"

	"ozonProject/internal/models"
	"ozonProject/internal/service"
)

func toStrID(id int64) string {
	return strconv.FormatInt(id, 10)
}

func valOr[T any](p *T, def T) T {
	if p != nil {
		return *p
	}
	return def
}

func (r *commentResolver) ID(ctx context.Context, obj *models.Comment) (string, error) {
	return toStrID(obj.ID), nil
}

func (r *commentResolver) PostID(ctx context.Context, obj *models.Comment) (string, error) {
	return toStrID(obj.PostID), nil
}

func (r *commentResolver) ParentID(ctx context.Context, obj *models.Comment) (*string, error) {
	if obj.ParentID == nil {
		return nil, nil
	}
	s := toStrID(*obj.ParentID)

	return &s, nil
}

func (r *commentResolver) Children(ctx context.Context, obj *models.Comment, limit *int, offset *int) ([]*models.Comment, error) {
	l := valOr(limit, 10)
	o := valOr(offset, 0)

	pid := toStrID(obj.ID)
	postID := toStrID(obj.PostID)
	comments, err := r.Service.ListComments(ctx, postID, &pid, l, o)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return comments, nil
}

func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, author string, commentsEnabled *bool) (*models.Post, error) {
	ce := true
	if commentsEnabled != nil {
		ce = *commentsEnabled
	}
	post, err := r.Service.CreatePost(ctx, title, content, author, ce)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return post, nil
}

func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, author string, content string) (*models.Comment, error) {
	c, err := r.Service.CreateComment(ctx, postID, parentID, author, content)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return c, nil
}

func (r *postResolver) ID(ctx context.Context, obj *models.Post) (string, error) {
	return toStrID(obj.ID), nil
}

func (r *postResolver) Comments(ctx context.Context, obj *models.Post, limit *int, offset *int, parentID *string) ([]*models.Comment, error) {
	l := valOr(limit, 10)
	o := valOr(offset, 0)
	postID := toStrID(obj.ID)

	comments, err := r.Service.ListComments(ctx, postID, parentID, l, o)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return comments, nil
}

func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*models.Post, error) {
	l := valOr(limit, 10)
	o := valOr(offset, 0)

	return r.Service.ListPosts(ctx, l, o)
}

func (r *queryResolver) Post(ctx context.Context, id string) (*models.Post, error) {
	return r.Service.GetPost(ctx, id)
}

func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Post() PostResolver { return &postResolver{r} }

func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
