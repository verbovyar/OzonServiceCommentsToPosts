package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"ozonProject/internal/models"
	"ozonProject/internal/service"
)

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *models.Comment, limit *int, offset *int) ([]*models.Comment, error) {
	comments, err := r.Service.ListComments(ctx, obj.PostID, obj.ParentID, limit, offset)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return comments, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, author string, commentsEnabled *bool) (*models.Post, error) {
	post, err := r.Service.CreatePost(ctx, title, content, author, commentsEnabled)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentId *string, author string, content string) (*models.Comment, error) {
	c, err := r.Service.CreateComment(ctx, postID, parentId, author, content)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	r.Bus.Publish(c)

	return c, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *models.Post, limit *int, offset *int, parentId *string) ([]*models.Comment, error) {
	comments, err := r.Service.ListComments(ctx, obj.ID, parentId, limit, offset)
	if err != nil {
		return nil, service.ToUserError(err)
	}

	return comments, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*models.Post, error) {
	return r.Service.ListPosts(ctx, limit, offset)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*models.Post, error) {
	return r.Service.GetPost(ctx, id)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *models.Comment, error) {
	ch := r.Bus.Subscribe(postID)

	go func() {
		<-ctx.Done()
		r.Bus.Unsubscribe(postID, ch)
	}()

	return ch, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
